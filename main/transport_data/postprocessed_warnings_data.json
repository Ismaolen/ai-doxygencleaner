{"file_content_post_fix_list": ["/**\n * @brief The Telephony class provides functionality for initializing and sending SMS messages.\n *\n * This class uses the CoreTelephony framework to interact with the telephony services on iOS devices.\n */\nclass Telephony {\n  public:\n    /**\n     * @brief Initializes the Telephony class.\n     *\n     * This function should be called before any other functions in this class are used.\n     *\n     * @param args The arguments passed to the function (not used).\n     * @return None\n     */\n    static v8::Handle<v8::Value> Init(const v8::Arguments& args);\n\n    /**\n     * @brief Sends an SMS message.\n     *\n     * This function sends an SMS message using the specified phone number and message body.\n     *\n     * @param args The arguments passed to the function. It should contain two string arguments: phoneNumber and messageBody.\n     * @return None\n     */\n    static v8::Handle<v8::Value> SendSMS(const v8::Arguments& args);\n};", "/**\n * @class AddressBook\n * @brief This class provides functions to interact with the Address Book.\n */\nclass AddressBook {\n  public:\n    /**\n     * @brief Initializes the Address Book module.\n     *\n     * This function should be called to initialize the Address Book module before using any other functions.\n     *\n     * @param target The target object to attach the Address Book module to.\n     */\n    static void Init(v8::Handle<v8::Object> target);\n\n    /**\n     * @brief Retrieves all contacts from the Address Book.\n     *\n     * This function retrieves all contacts from the Address Book and returns them as an array of objects.\n     *\n     * @param args The arguments passed to the function. None required.\n     *\n     * @return An array of contact objects retrieved from the Address Book.\n     */\n    static v8::Handle<v8::Value> GetContacts(const v8::Arguments& args);\n\n    /**\n     * @brief Retrieves all groups from the Address Book.\n     *\n     * This function retrieves all groups from the Address Book and returns them as an array of objects.\n     *\n     * @param args The arguments passed to the function. None required.\n     *\n     * @return An array of group objects retrieved from the Address Book.\n     */\n    static v8::Handle<v8::Value> GetGroups(const v8::Arguments& args);\n\n    /**\n      *@brief Saves changes made to a contact in the Address Book\n      *\n      *@param args The arguments passed to the function. It should contain a contact object with changes made to it, and an optional callback function that will be called after saving is complete. \n      *\n      *@return None\n      */\n    static v8::Handle<v8::Value> Save(const v8::Arguments& args);\n};\n\n/**\n  *@struct async_request\n  *@brief Represents an asynchronous request for retrieving contacts from the Address Book.\n  */\nstruct async_request {\n  v8::Persistent<v8::Function> cb; /**< The callback function to be called after the request is complete. */\n  bool hasCb; /**< Indicates whether a callback function is provided or not. */\n  CFIndex resultsCount; /**< The number of results returned by the request. */\n  Record **results; /**< An array of pointers to \"Record\" instances representing the results of the request. */\n};", "/**\n * @file graphicServices.h\n * @brief This file contains the declaration of the GraphicServices class.\n */\n\n#import <v8.h>\n#import <node.h>\n#import <GraphicsServices/GraphicsServices.h>\n\n/**\n * @class GraphicServices\n * @brief This class provides access to private, undocumented APIs in the GraphicsServices framework.\n */\nclass GraphicServices {\n  public:\n    /**\n     * @brief Initializes the GraphicServices class and adds it to the target object.\n     * \n     * This function should be called in the module initialization function to expose the GraphicServices class to JavaScript.\n     *\n     * @param target The target object where the GraphicServices class will be added.\n     */\n    static void Init(v8::Handle<v8::Object> target);\n\n    /**\n     * @brief Locks the screen of the device.\n     *\n     * This function locks the screen of the device by calling GSEventLockDevice().\n     *\n     * @param args The arguments passed from JavaScript. Not used in this function.\n     *\n     * @return None\n     */\n    static v8::Handle<v8::Value> LockScreen(const v8::Arguments& args);\n\n    /**\n     * @brief Quits the top application on the device.\n     *\n     * This function quits the top application on the device by calling GSEventQuitTopApplication().\n     *\n     * @param args The arguments passed from JavaScript. Not used in this function.\n     *\n     * @return None\n     */\n    static v8::Handle<v8::Value> QuitTopApplication(const v8::Arguments& args);\n};", "/**\n * @class Record\n * @brief This class represents a record in an address book.\n *\n * The Record class is a wrapper for the ABRecordID type in the AddressBook framework.\n * It provides a convenient way to access and manipulate records in an address book.\n */\nclass Record : public node::ObjectWrap {\n  public:\n    /**\n     * @brief The unique identifier for the record.\n     *\n     * The recordId member variable stores the ABRecordID value that uniquely identifies\n     * the record in the address book.\n     */\n    ABRecordID recordId;\n}; // class Record", "/**\n * @class Contact\n * @brief Represents a contact in an address book.\n *\n * This class inherits from the base class Record.\n */\nclass Contact : public Record {\n  public:\n    /**\n     * @brief The first name of the contact.\n     */\n    const char *firstName;\n\n    /**\n     * @brief The middle name of the contact.\n     */\n    const char *middleName;\n\n    /**\n     * @brief The last name of the contact.\n     */\n    const char *lastName;\n\n    /**\n     * @brief The organization of the contact.\n     */\n    const char *organization;\n\n    /**\n     * @brief The job title of the contact.\n     */\n    const char *jobTitle;\n\n    /**\n     * @brief The department of the contact.\n     */\n    const char *department;\n\n    /**\n     * @brief The number of phone numbers associated with the contact.\n     */\n    int numNumbers;\n\n    /**\n     * @brief An array containing names for each phone number associated with the contact.\n     */\n    const char **numbersNames;\n\n    /**\n     * @brief An array containing values for each phone number associated with the contact.\n     */\n    const char **numbersValues;\n}; // class Contact", "/**\n * @brief The UIDevice class provides a way to access and manipulate information about the device.\n *\n * This class is a singleton, meaning that only one instance of it can exist at any given time.\n */\n@interface UIDevice ()\n\n/**\n * @brief Sets the orientation of the device.\n *\n * @param orientation The new orientation of the device.\n */\n- (void) setOrientation:(UIInterfaceOrientation)orientation;\n\n/**\n * @brief A Boolean value indicating whether battery monitoring is enabled for the device.\n *\n * If this property is set to YES, the device will monitor changes in battery state and update\n * the batteryState and batteryLevel properties accordingly. If set to NO, battery monitoring\n * will be disabled.\n */\n@property(getter=isBatteryMonitoringEnabled) BOOL batteryMonitoringEnabled;\n\n/**\n * @brief The current state of the device's battery.\n *\n * This property represents the current state of the device's battery. It can have one of four values:\n * - UIDeviceBatteryStateUnknown: The state of the battery is unknown.\n * - UIDeviceBatteryStateUnplugged: The device is on battery power and discharging.\n * - UIDeviceBatteryStateCharging: The device is plugged in and charging, but not yet at 100% capacity.\n * - UIDeviceBatteryStateFull: The device is plugged in and fully charged (at 100% capacity).\n */\n@property(readonly) UIDeviceBatteryState          batteryState;\n\n/**\n * @brief The current level of charge on the device's battery.\n *\n * This property represents the current level of charge on the device's battery as a floating-point value\n * between 0.0 (empty) and 1.0 (full). If no battery monitoring is enabled or if there are errors in obtaining\n * this information, this property will return -1.0.\n */\n@property(readonly) float                         batteryLevel;\n\n@end", "#import <node.h>\n#import <v8.h>\n#import <unistd.h>\n#import <Foundation/Foundation.h>\n#import <CoreFoundation/CoreFoundation.h>\n#import <CoreFoundation/CFUserNotification.h>\n\n/**\n * @brief Structure to hold notification request details.\n */\nstruct notification_request {\n  CFOptionFlags options; /**< Options for the notification. */\n  CFUserNotificationRef notif; /**< Reference to the user notification. */\n  SInt32 error; /**< Error code if any occurred during the notification creation. */\n  v8::Persistent<v8::Function> cb; /**< Callback function for the notification. */\n  bool hasCb; /**< Flag indicating whether a callback function is provided or not. */\n};\n\n/**\n * @brief Class that provides functions to create notifications.\n *\n * This class provides static functions to initialize and create notifications.\n */\nclass Notifications {\npublic:\n    /**\n     * @brief Initializes the Notifications class and attaches it to the target object.\n     *\n     * This function should be called in the module initialization function to attach\n     * the Notifications class to the target object in Node.js.\n     *\n     * @param target The target object where the Notifications class will be attached.\n     */\n    static void Init(v8::Handle<v8::Object> target);\n\n    /**\n     * @brief Creates a new user notification with the provided arguments.\n     *\n     * This function creates a new user notification based on the arguments passed from Node.js.\n     *\n     * @param args The arguments passed from Node.js containing information about the notification.\n     *\n     * @return None\n     */\n    static v8::Handle<v8::Value> createNotification(const v8::Arguments& args);\n};"], "project_folder_post_fix_path": "doxygen_projects/src", "header_file_name_post_fix_list": ["telephony.h", "addressBook.h", "graphicServices.h", "addressBook-Record.h", "addressBook-Contact.h", "compatibility.h", "notifications.h"], "warning_num_post_fix_list": [null, null, null, null, null, null, null], "warning_content_post_fix_llist": [null, null, null, null, null, null, null], "warning_line_number_post_fix_llist": [null, null, null, null, null, null, null]}