{"file_content_post_fix_list": ["/**\n * @file telephony.h\n * @brief This file contains the declaration of the Telephony class.\n */\n\n#import <node.h>\n#import <v8.h>\n#import <Foundation/Foundation.h>\n#import <CoreFoundation/CoreFoundation.h>\n#import <CoreTelephony/CoreTelephony.h>\n\n/**\n * @class Telephony\n * @brief This class provides functionality related to telephony operations.\n */\nclass Telephony {\n  public:\n    /**\n     * @brief Initializes the Telephony class.\n     *\n     * This function initializes the Telephony class and sets up necessary resources.\n     *\n     * @param args The arguments passed to the function (not used).\n     * @return None\n     */\n    static v8::Handle<v8::Value> Init(const v8::Arguments& args);\n\n    /**\n     * @brief Sends an SMS message.\n     *\n     * This function sends an SMS message using the specified parameters.\n     *\n     * @param args The arguments passed to the function (not used).\n     * @return None\n     */\n    static v8::Handle<v8::Value> SendSMS(const v8::Arguments& args);\n};", "/**\n * @class AddressBook\n * @brief This class provides functions to interact with the Address Book on macOS.\n */\n\n/**\n * @fn void AddressBook::Init(v8::Handle<v8::Object> target)\n * @brief Initializes the AddressBook class and adds it to the target object.\n * @param target The target object to add the AddressBook class to.\n */\n\n/**\n * @fn v8::Handle<v8::Value> AddressBook::GetContacts(const v8::Arguments& args)\n * @brief Retrieves all contacts from the Address Book.\n * @param args The arguments passed to the function (none required).\n * @return An array of contact objects.\n */\n\n/**\n * @fn v8::Handle<v8::Value> AddressBook::GetGroups(const v8::Arguments& args)\n * @brief Retrieves all groups from the Address Book.\n * @param args The arguments passed to the function (none required).\n * @return An array of group objects.\n */\n\n/**\n * @fn v8::Handle<v8::Value> AddressBook::Save(const v8::Arguments& args)\n * @brief Saves changes made to the Address Book.\n * @param args The arguments passed to the function (none required).\n */", "/**\n * @file graphicServices.h\n * @brief This file contains the declaration of the GraphicServices class.\n */\n\n#import <v8.h>\n#import <node.h>\n#import <GraphicsServices/GraphicsServices.h>\n\n/**\n * @class GraphicServices\n * @brief This class provides access to private, undocumented APIs in GraphicsServices.\n */\nclass GraphicServices {\n  public:\n    /**\n     * @brief Initializes the GraphicServices class and sets up the target object.\n     *\n     * @param target The target object to set up.\n     */\n    static void Init(v8::Handle<v8::Object> target);\n\n    /**\n     * @brief Locks the screen.\n     *\n     * This function locks the screen by calling GSEventLockDevice().\n     *\n     * @param args The arguments passed to the function (none required).\n     *\n     * @return None\n     */\n    static v8::Handle<v8::Value> LockScreen(const v8::Arguments& args);\n\n    /**\n     * @brief Quits the top application.\n     *\n     * This function quits the top application by calling GSEventQuitTopApplication().\n     *\n     * @param args The arguments passed to the function (none required).\n     *\n     * @return None\n     */\n    static v8::Handle<v8::Value> QuitTopApplication(const v8::Arguments& args);\n};", "/**\n * @class Record\n * @brief Represents a record in an address book.\n *\n * This class is used to store information about a record in an address book.\n */\nclass Record : public node::ObjectWrap {\n  public:\n    ABRecordID recordId; /**< The unique identifier of the record. */\n}; // class Record", "/**\n * @class Contact\n * @brief Represents a contact in an address book.\n *\n * This class inherits from the base class Record and adds additional fields to represent a person's contact information.\n */\nclass Contact : public Record {\n  public:\n    /**\n     * @brief The first name of the contact.\n     */\n    const char *firstName;\n    \n    /**\n     * @brief The middle name of the contact.\n     */\n    const char *middleName;\n    \n    /**\n     * @brief The last name of the contact.\n     */\n    const char *lastName;\n    \n    /**\n     * @brief The organization of the contact.\n     */\n    const char *organization;\n    \n    /**\n     * @brief The job title of the contact.\n     */\n    const char *jobTitle;\n    \n    /**\n     * @brief The department of the contact.\n     */\n    const char *department;\n    \n    /**\n     * @brief The number of phone numbers associated with the contact.\n     */\n    int numNumbers;\n    \n    /**\n     * @brief An array containing names for each phone number associated with the contact.\n     */\n    const char **numbersNames;\n    \n    /**\n     * @brief An array containing values for each phone number associated with the contact.\n     */\n    const char **numbersValues;\n}; // class Contact", "/**\n * @brief The UIDevice class provides access to information about the device such as battery state and orientation.\n */\n@interface UIDevice ()\n\n/**\n * @brief Sets the orientation of the device.\n *\n * @param orientation The new orientation of the device.\n */\n- (void) setOrientation:(UIInterfaceOrientation)orientation;\n\n/**\n * @brief A Boolean value indicating whether battery monitoring is enabled (YES) or not (NO).\n *\n * @return None\n */\n@property(getter=isBatteryMonitoringEnabled) BOOL batteryMonitoringEnabled;\n\n/**\n * @brief The current battery state of the device.\n *\n * @return None\n */\n@property(readonly) UIDeviceBatteryState batteryState;\n\n/**\n * @brief The current battery level of the device, ranging from 0.0 (empty) to 1.0 (full).\n *\n * @return None\n */\n@property(readonly) float batteryLevel;\n\n@end", "#import <node.h>\n#import <v8.h>\n#import <unistd.h>\n#import <Foundation/Foundation.h>\n#import <CoreFoundation/CoreFoundation.h>\n#import <CoreFoundation/CFUserNotification.h>\n\n/**\n * @brief Structure to hold the notification request details.\n */\nstruct notification_request {\n  CFOptionFlags options; /**< The options for the notification. */\n  CFUserNotificationRef notif; /**< The reference to the user notification. */\n  SInt32 error; /**< The error code if any occurred during the notification creation. */\n  v8::Persistent<v8::Function> cb; /**< The callback function for the notification. */\n  bool hasCb; /**< Flag indicating whether a callback function is provided or not. */\n};\n\n/**\n * @brief Class to handle notifications.\n *\n * This class provides methods to create and manage notifications.\n */\nclass Notifications {\n  public:\n    /**\n     * @brief Initialize the Notifications class.\n     *\n     * This method should be called to initialize the Notifications class before using it.\n     *\n     * @param target The target object where the Notifications class will be attached.\n     */\n    static void Init(v8::Handle<v8::Object> target);\n\n    /**\n     * @brief Create a new notification.\n     *\n     * This method creates a new user notification with the specified options and returns its reference.\n     *\n     * @param args The arguments passed to the createNotification method.\n     *\n     * @return None\n     */\n    static v8::Handle<v8::Value> createNotification(const v8::Arguments& args);\n};"], "project_folder_post_fix_path": "doxygen_projects/src", "header_file_name_post_fix_list": ["telephony.h", "addressBook.h", "graphicServices.h", "addressBook-Record.h", "addressBook-Contact.h", "compatibility.h", "notifications.h"], "warning_num_post_fix_list": [null, 4, null, null, null, null, null], "warning_content_post_fix_llist": [null, ["warning: documented symbol 'void AddressBook::Init' was not declared or defined.", "warning: documented symbol 'v8::Handle< v8::Value > AddressBook::GetContacts' was not declared or defined.", "warning: documented symbol 'v8::Handle< v8::Value > AddressBook::GetGroups' was not declared or defined.", "warning: documented symbol 'v8::Handle< v8::Value > AddressBook::Save' was not declared or defined."], null, null, null, null, null], "warning_line_number_post_fix_llist": [null, ["7", "13", "20", "27"], null, null, null, null, null]}