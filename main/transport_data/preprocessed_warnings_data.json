{"project_folder_pre_fix_path": "doxygen_projects/chrone_2", "header_file_name_pre_fix_list": ["classepost.h", "classepre.h"], "file_content_pre_fix_list": ["#pragma once\n\nclass Serial : public IMemoryUnit\n{\npublic:\n    /**\n     * @brief Constructs a new Serial object.\n     */\n    Serial();\n\n    ~Serial();\n\n    // IMemoryUnit\n\n    /**\n     * @brief Reads a byte from the specified address in memory.\n     *\n     * @param address The address to read from.\n     * @return The byte value read from memory.\n     */\n    byte ReadByte(const ushort& address);\n\n    /**\n     * @brief Writes a byte to the specified address in memory.\n     *\n     * @param address The address to write to.\n     * @param val The byte value to write.\n     * @return True if the write operation was successful, false otherwise.\n     */\n    bool WriteByte(const ushort& address, const byte val);\n\nprivate:\n    byte m_Data; ///< Member variable to hold data.\n};", "#pragma once\n\nclass Serial : public IMemoryUnit\n{\npublic:\n\n    /**\n     * @brief Constructs a Serial object.\n     */\n    Serial();\n\n    /**\n     * @brief Destroys the Serial object.\n     */\n    ~Serial();\n\n    // IMemoryUnit\n\n\n    byte ReadByte(const ushort& address);\n\n    /**\n     * @brief Writes a byte of data to the specified address in memory.\n     *\n     * @param address The address to write to.\n     * @param val The value to write.\n     * @return True if the write operation was successful, false otherwise.\n     */\n    bool WriteByte(const ushort& address, const byte val);\n\nprivate:\n    byte m_Data;\n};"], "warning_num_pre_fix_list": [1, 2], "warning_content_pre_fix_llist": [["warning: Compound Serial is not documented."], ["warning: Compound Serial is not documented.", "warning: Member ReadByte(const ushort &address) (function) of class Serial is not documented."]], "warning_line_number_pre_fix_llist": [["4"], ["4", "20"]]}